#!/usr/bin/env node

/*
 * duEuler Foundation Exporter v2.0
 * 
 * Category: automation
 * Capacity: du:capacity:[all]
 * Dependencies: ['fs', 'path', 'archiver']
 * Related Files: ['validator.cjs', 'initializer.cjs']
 * Purpose: Export clean foundation ZIP for new projects
 * Usage: node dueuler-foundation/automation/exporter.cjs [capacity]
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const FOUNDATION_DIR = 'dueuler-foundation';
const EXPORT_DIR = path.join(FOUNDATION_DIR, 'exports');

// Files to include in export
const EXPORT_INCLUDES = [
  'core/**/*',
  'configs/**/*',
  'automation/**/*',
  'testing/**/*',
  'monitoring/**/*',
  'security/**/*',
  'dependencies/**/*',
  'templates/**/*',
  'anomalies/tracker.md',
  'anomalies/solutions/**/*'
];

// Files to exclude from export
const EXPORT_EXCLUDES = [
  'exports/',
  'anomalies/validation-report.json',
  'testing/reports/',
  '*.log',
  'node_modules/',
  '.git/',
  'dist/',
  'temp/'
];

function log(message, color = 'white') {
  const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
  };
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function createDirectoryStructure() {
  if (!fs.existsSync(EXPORT_DIR)) {
    fs.mkdirSync(EXPORT_DIR, { recursive: true });
  }
  
  const versionsDir = path.join(EXPORT_DIR, 'previous-versions');
  if (!fs.existsSync(versionsDir)) {
    fs.mkdirSync(versionsDir, { recursive: true });
  }
}

function validateFoundation() {
  log('üîç Validating foundation before export...', 'cyan');
  
  try {
    const validatorPath = path.join(FOUNDATION_DIR, 'automation', 'validator.cjs');
    if (fs.existsSync(validatorPath)) {
      execSync(`node ${validatorPath}`, { stdio: 'inherit' });
      log('‚úÖ Foundation validation passed', 'green');
      return true;
    } else {
      log('‚ö†Ô∏è Validator not found, proceeding with export', 'yellow');
      return true;
    }
  } catch (error) {
    log('‚ùå Foundation validation failed:', 'red');
    console.error(error.message);
    return false;
  }
}

function generateZipArchive(capacity = 'all') {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];
  const zipName = `dueuler-foundation-${capacity}-${timestamp}.zip`;
  const zipPath = path.join(EXPORT_DIR, zipName);
  
  log(`üì¶ Creating ZIP archive: ${zipName}`, 'blue');
  
  try {
    // Move old version if exists
    const latestPath = path.join(EXPORT_DIR, 'dueuler-foundation-latest.zip');
    if (fs.existsSync(latestPath)) {
      const versionsDir = path.join(EXPORT_DIR, 'previous-versions');
      const oldName = `dueuler-foundation-previous-${timestamp}.zip`;
      fs.renameSync(latestPath, path.join(versionsDir, oldName));
      log(`üìÅ Moved previous version to: ${oldName}`, 'yellow');
    }
    
    // Create new ZIP
    const zipCommand = `cd ${FOUNDATION_DIR} && zip -r "../${zipPath}" . -x "exports/*" "*.log" "node_modules/*"`;
    execSync(zipCommand, { stdio: 'inherit' });
    
    // Create latest symlink
    fs.copyFileSync(zipPath, latestPath);
    
    log(`‚úÖ Export completed: ${zipPath}`, 'green');
    return zipPath;
  } catch (error) {
    log('‚ùå ZIP creation failed:', 'red');
    console.error(error.message);
    return null;
  }
}

function generateManifest() {
  const manifestPath = path.join(EXPORT_DIR, 'EXPORT_MANIFEST.md');
  const timestamp = new Date().toISOString();
  
  const manifest = `# duEuler Foundation Export Manifest

## Export Information
- **Date**: ${timestamp}
- **Version**: 2.0
- **Capacity**: All levels supported
- **Total Files**: ${countFoundationFiles()}

## Included Components
- ‚úÖ Core documentation and metadata
- ‚úÖ All 6 capacity configurations (nano ‚Üí enterprise)
- ‚úÖ Automation scripts (validator, upgrader, initializer, exporter)
- ‚úÖ Complete test suite with 184+ tests
- ‚úÖ Monitoring services (Prometheus, Grafana)
- ‚úÖ Security components (Secrets Manager)
- ‚úÖ Dependency mapping and management
- ‚úÖ Project templates
- ‚úÖ Anomaly tracking system

## Installation Instructions
1. Extract ZIP to your project root
2. Run: \`node dueuler-foundation/automation/initializer.cjs [capacity] [project-name]\`
3. Configure .env file with your settings
4. Run: \`npm install\`
5. Validate: \`npm run validate\`

## Support
- Documentation: dueuler-foundation/core/README.md
- Issues: dueuler-foundation/anomalies/tracker.md
- Tests: \`npm run test-foundation\`

---
Generated by duEuler Foundation Exporter v2.0
`;

  fs.writeFileSync(manifestPath, manifest);
  log(`üìã Manifest created: ${manifestPath}`, 'cyan');
}

function countFoundationFiles() {
  let count = 0;
  function countRecursive(dir) {
    if (!fs.existsSync(dir)) return;
    const items = fs.readdirSync(dir);
    for (const item of items) {
      const fullPath = path.join(dir, item);
      if (fs.statSync(fullPath).isDirectory()) {
        countRecursive(fullPath);
      } else {
        count++;
      }
    }
  }
  countRecursive(FOUNDATION_DIR);
  return count;
}

function main() {
  const capacity = process.argv[2] || 'all';
  
  log('üöÄ Starting duEuler Foundation Export...', 'magenta');
  log(`üìä Target capacity: ${capacity}`, 'cyan');
  
  // Create export directory structure
  createDirectoryStructure();
  
  // Validate foundation before export
  if (!validateFoundation()) {
    log('‚ùå Export aborted due to validation failures', 'red');
    process.exit(1);
  }
  
  // Generate ZIP archive
  const zipPath = generateZipArchive(capacity);
  if (!zipPath) {
    log('‚ùå Export failed', 'red');
    process.exit(1);
  }
  
  // Generate manifest
  generateManifest();
  
  // Final summary
  log('\nüéâ Export Summary:', 'green');
  log(`   üì¶ ZIP: ${zipPath}`, 'white');
  log(`   üìã Manifest: ${EXPORT_DIR}/EXPORT_MANIFEST.md`, 'white');
  log(`   üìÅ Files: ${countFoundationFiles()} foundation components`, 'white');
  log('\nüí° Usage:', 'yellow');
  log('   Extract ZIP to new project and run:', 'white');
  log('   node dueuler-foundation/automation/initializer.cjs small my-app', 'cyan');
}

if (require.main === module) {
  main();
}

module.exports = { generateZipArchive, validateFoundation };